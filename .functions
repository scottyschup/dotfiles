#! /bin/zsh

function args_test {
  last=${@: -1}
  echo "All agrs: $@"
  echo "Last args: $last"
  echo "Num of args: $#"
}

function bundle_rails_server_on_port {
  if [ $1 ]; then
    bundle exec rails server -p $1
    return 0
  else
    echo "${RED}Error: Enter port number to run server on${NONE}"
    return 1
  fi
}

function cd_atom {
  cd $1 && atom .
}
alias cda='cd_atom'

function cd_ll {
  cd $1 && k -Ah
}
alias cdl='cd_ll'

function cd_subl {
  cd $1 && subl .
}

function cors_test {
  if [ ! -n "$2" ]; then
    echo "You must provide an origin URL AND an external URL"
    return 1
  fi
  curl -H "Origin: $1" -I "$2"
}

# Colored echo helpers
function echo_ok { echo -e '\033[1;32m'"$1"'\033[0m'; }
function echo_warn { echo -e '\033[1;33m'"$1"'\033[0m'; }
function echo_error  { echo -e '\033[1;31mERROR: '"$1"'\033[0m'; }
alias echo_err=echo_error

function mkdir_cd {
  if [ ! -n "$1" ]; then
    echo "Enter a directory name"
    return 1
  elif [ -d $1 ]; then
    echo "\`$1' already exists"
    return 2
  else
    mkdir $1 && cd $1
    return 0
  fi
}
alias mkcd='mkdir_cd'

function my_watch {
  while :; do
    result=$($@)
    clear
    echo "Updating every 2 seconds"
    date
    echo "\n$result"
    sleep 2
  done
}

function new_react_project {
  GRN='\033[0;32m'
  NONE='\033[0m'

  echo "${GRN}initialize directory${NONE}"
  mkcd $1 &&
  echo "${GRN}create package.json${NONE}"
  npm init --yes &&
  echo "${GRN}install react components${NONE}"
  react_install &&
  echo "${GRN}install webpack${NONE}"
  react_webpack &&
  echo "${GRN}install babel components${NONE}"
  react_babel_install &&
  echo "${GRN}create index.html${NONE}"
  touch index.html &&
  echo "${GRN}create lib/${NONE}"
  mkdir lib &&
  echo "${GRN}create lib/app.jsx${NONE}"
  touch lib/app.jsx &&
  echo "${GRN}initialize git repo${NONE}"
  git init &&
  git add .
  git commit -m "Initial commit" &&
  atom . &&
  wp --watch
}
alias react_new='new_react_project'

function omni_killer {
  count=0
  pids="$(pids_for $@)"

  for pid in $(echo $pids); do
    (kill -9 $(($pid)) || kill -9 $pid) && ((count++))
  done

  if [ $count = 1 ]; then
    echo "1 $1 process terminated: $pids."
  elif [ $count -gt 0 ]; then
    echo "$count $1 processes terminated: $pids."
  else
    echo "No $1 processes found."
  fi
}
alias die=omni_killer

function output_to_file {
  usage="Usage: output_to_file [-x] file_to_write_to command_to_run\nNote: -x will overwrite existing file contents;\nwithout -x will append"

  if [[ $1 == -* ]]; then
    flag="$1"
    shift

    if [[ $# -lt 2 ]]; then
      echo "$usage"
      return 1
    fi
  fi

  file=$1
  shift

  case $flag in
  '-x')
    echo "\nOutput to file: $file\n\t$@\n" > $file
    ;;
  *)
    echo "\nOutput to file: $file\n\t$@\n" >> $file
    ;;
  esac
  unset flag

  echo "Output $GRN$@$NONE to file $YLW$file$NONE"
  $@ | col -b >> $file
}
alias o2f=output_to_file

function over {
  cd ../$1
}

function pids_for {
  psaux_with_grep $1 |
  grep -v grep |
  awk '{print $2}' |
  tr '\n' ' ' |
  sed 's/[[:space:]]*$//'
}
alias pids=pids_for

function ping_google {
  if [ $1 ]; then
    count=$1
  else
    count=5
  fi

  ping -c $count google.com
}

function pretty_print {
  if [ $2 ]
  then
    local delimiter="$2"
  else
    local delimiter=' '
  fi
  echo "$1" | tr "$delimiter" "\n"
}

function psaux_with_grep {
  ps aux | grep $1
}
alias psgrep=psaux_with_grep

function rails_new {
  rails _4.2.5.1_ new $1 --rc="~/.railsrc" --template="~/.railsrc"
}
alias rn='rails_new'

function rails_server_on_port {
  if [ $1 ]; then
    rails server -p $1
    return 0
  else
    echo 'Error: Enter port number to run server on'
    return 1
  fi
}
alias rsop='rails_server_on_port'

function rails_reset {
  (mysql.server restart ||
    brew services restart postgresql) &&
  bundle install &&
  rake db:drop &&
  rake db:create &&
  rake db:migrate &&
  rake db:seed &&
  rails server
}
alias rrs='rails_reset'

function uninstallAllLocalGems {
  list=`gem list --no-versions`
  for gem in `echo $list`; do # `echo $list` part is for zsh; bash only needs $list
    if [[ $gem = bundler ]]; then echo -e "${YLW}Skipping $gem${NONE}"; continue; fi
    gem uninstall $gem -aIx
  done
  gem list
}

function untarAll {
  for file in $( ls ); do
    dir=${file%.tar};
    mkdir $dir;
    tar -C $dir/ -xvf $file;
  done
}

function untargzAll {
   for file in $( ls ); do
    dir=${file%.tar};
    mkdir $dir;
    tar -C $dir/ -zxvf $file;
  done
}

function which_cd {
  cd `which $1 | xargs dirname`
}
alias whcd='which_cd'

function which_cd_ll {
  cd `which $1 | xargs dirname` && k -Ah
}
alias whcdl='which_cd_ll'

function z_atom {
  z $1 && atom .
}
alias za='z_atom'

function z_ll {
  z $1 && k -Ah
}
alias zl='z_ll'

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

echo 'Sourced .functions'

#############
# Shareable #
#############
## DEPRECATED: see die/omni_killer above
function __kill_all {
  # Usage:
  # kill_all redis
  # ^ will `kill -9` all process IDs with the word "redis" in the `ps aux` line
  count=0
  pids="$(ps aux |
    grep $1 |
    grep -v grep |
    awk '{print $2}' |
    tr '\n' ' ' |
    sed 's/[[:space:]]*$//'
  )"

  for pid in $(echo $pids); do
    (kill -9 $(($pid)) || kill -9 $pid) && ((count++))
  done

  if [ $count = 1 ]; then
    echo "1 $1 process terminated: $pids."
  elif [ $count -gt 0 ]; then
    echo "$count $1 processes terminated: $pids."
  else
    echo "No $1 processes found."
  fi
}
