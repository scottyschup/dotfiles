#!/usr/bin/env ruby -w

# WIP! Needs lots of testing/UAT

require 'English'
require 'English'
begin
  verbose = $VERBOSE
  $VERBOSE = nil # Suppress deprecation warnings and the like
  require "colorize"
rescue LoadError => err
  # Error example:
  #   pry(main)> require 'fake_gem/with/path'
  #   LoadError: cannot load such file -- fake-gem/with/path
  #   from /Users/username/.rbenv/versions/2.4.7/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
  dependency = err.message.split(" -- ").last
  # Remove "/with/path" from the gem name; noop for all others
  dependency = dependency.split("/").first
  $stderr.puts "Missing dependency: #{dependency}"
  $stderr.puts "Make sure the following command completes successfully before using this script."
  exit 1
ensure
  $VERBOSE = verbose
end

push_merged_branch = ARGV.any? { |arg| arg == "push" }

if ARGV.any? { |arg| arg == "help" }
  $stdout.puts "git_backmerge_latest_master [OPTION]"
  $stdout.puts "Options:"
  $stdout.puts "\tpush\t\tPushes to origin after successful merge; no-op if any step fails"
  $stdout.puts "\thelp\t\tShow this help menu."
  exit
end

results = {}
working_branch = `git_branch_history current`.strip
exit unless working_branch

# Stash unstaged changes
cmd = "git stash"
$stdout.puts "\nRunning command: '#{cmd}'"
results[:stash] = `#{cmd}` # This one I need the actual message, not just the boolean for success/failure
unless results[:stash]
  $stderr.puts "❌\nAction `stash` failed; check output above for more details".red
  exit
end
stashed_changes = !results[:stash].include?("No local changes to save")
$stdout.puts "✅ Action `stash` done!"

# Checkout master
cmd = "git checkout --force master"
$stdout.puts "\nRunning command: '#{cmd}'"
results[:checkout] = system cmd
unless results[:checkout]
  $stderr.puts "❌\nAction `checkout` failed; check output above for more details".red
  exit
end
$stdout.puts "✅ Action `checkout` done!"

# Fetch and pull latest
cmd = "git fetch --all; git pull"
$stdout.puts "\nRunning command: '#{cmd}'"
results[:pull] = system cmd
unless results[:pull]
  $stderr.puts "❌\nAction `pull` failed; check output above for more details".red
  exit
end
$stdout.puts "✅ Action `pull` done!"

# Checkout working branch
cmd = "git checkout #{working_branch}"
$stdout.puts "\nRunning command: '#{cmd}'"
results[:switch_back] = system cmd
unless results[:switch_back]
  $stderr.puts "❌\nAction `switch_back` failed; check output above for more details".red
  exit
end
$stdout.puts "✅ Action `switch_back` done!"

# Merge
cmd = "git merge master --no-commit --no-ff"
$stdout.puts "\nRunning command: '#{cmd}'"
results[:merge] = `#{cmd}`
if results[:merge].include?("Already up to date.")
  $stdout.puts "✅ Action `merge` done!"
  exit
elsif $CHILD_STATUS.exitstatus.positive?
  $stderr.puts "❌\nAction `merge` failed; check output above for more details".red
  exit
end
$stdout.puts "✅ Action `merge` done!"

# Stage and commit changes after merge
cmd = "git add -A; git commit -m 'Backmerge master into #{working_branch}'"
$stdout.puts "\nRunning command: '#{cmd}'"
results[:add_commit] = system cmd
unless results[:add_commit]
  $stderr.puts "❌\nAction `add_commit` failed; check output above for more details".red
  $stdout.puts $CHILD_STATUS.to_s
  exit
end
$stdout.puts "✅ Action `add_commit` done!"

# Push (conditionally based on args)
if push_merged_branch
  cmd = "git push"
  $stdout.puts "\nRunning command: '#{cmd}'"
  results[:push] = system cmd
  unless results[:push]
    $stderr.puts "❌\nAction `push` failed; check output above for more details".red
    exit
  end
  $stdout.puts "✅ Action `push` done!"
else
  $stdout.puts "Not pushing to remote. To include pushing, add `push` to the end of the command."
end

# Applied previously stashed changes
if stashed_changes
  cmd = "git stash pop"
  $stdout.puts "\nRunning command: '#{cmd}'"
  results[:stash_apply] = system cmd
  unless results[:stash_apply]
    $stderr.puts "❌\nAction `stash_apply` failed; check output above for more details".red
    exit
  end
  $stdout.puts "✅ Action `stash_apply` done!"
else
  $stdout.puts "Nothing stashed."
end
