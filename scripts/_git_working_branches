#!/usr/bin/env ruby -w

# ABANDONED: use `git_branch_history` instead

###########
# HELPERS #
###########
def ls_branches
  working_branches = get_branches
  if working_branches.empty?
    $stdout.puts "No branches"
    exit
  end
  working_branches.map.with_index { |branch, idx| "#{idx}. #{branch}" }
end

def print_branches
  $stdout.puts "Working git branches:"
  $stdout.puts ls_branches.join("\n")
end

def print_branch(idx)
  working_branches = get_branches
  $stdout.puts working_branches[idx]
end

def get_branches
  `echo $GIT_WORKING_BRANCHES`.split("\n")
end

def set_branches(working_branches)
  `export GIT_WORKING_BRANCHES=#{working_branches.join(" ")}`
end

def stringified_number?(str)
  idx = str.to_i
  idx.to_s == str
end

########
# MAIN #
########
working_branches = get_branches

if ARGV.length > 2
  $stdout.puts "Too many arguments: #{ARGV.join(', ')}"
elsif ARGV.length == 2
  cmd = ARGV.shift
  arg = ARGV.shift
  is_index = stringified_number?(arg)

  case cmd
  when 'set', 'add', 'push'
    working_branches.push(arg)
    set_branches working_branches
    print_branches
  when 'del'
    deleted = is_index ? working_branches.delete_at(arg) : working_branches.delete(arg)
    set_branches working_branches
    $stdout.puts "Branch #{deleted} deleted"
    print_branches
  when 'shift'
    working_branches.push(arg)
    set_branches working_branches
    print_branches
  when 'test'
    ENV['TESTT'] = arg
  when 'drop'
    deleted = working_branches.drop
    set_branches working_branches
    $stdout.puts "Branch #{deleted} deleted"
    print_branches
  else
    $stdout.puts "Unknown command: #{cmd}"
  end
elsif ARGV.length == 1
  idx_str = ARGV.shift
  if %w(ls list show).include? idx_str
    print_branches
    exit
  elsif stringified_number?(idx_str)
    $stdout.puts working_branches[idx_str.to_i]
    exit
  end
  $stdout.puts "Invalid index: #{idx_str}"
elsif ARGV.length == 0
  print_branches
  exit
end
