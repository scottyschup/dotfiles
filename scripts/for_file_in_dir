#!/usr/bin/env ruby -w

def usage(err = nil)
  $stdout.puts err if err
  $stdout.puts if err
  $stdout.puts "Usage:"
  $stdout.puts "\tfor_file_in_dir DIR 'Ruby code string using `file` as the local variable name'"
  $stdout.puts "\t Flags:"
  $stdout.puts "\t\t-h --help help       This usage message"
  $stdout.puts "\t\t-d --allow-dirs      Will process dirs as files (does not do this by default)"
  $stdout.puts "\t\t-f --file-name-only  Will use file name only in Proc#call statement (uses full path by default)"
  $stdout.puts
  $stdout.puts "Examples:"
  $stdout.puts "\tfor_file_in_dir 'f = File.open(file, \"a+\"); f.puts \"Hello World\"'"
  $stdout.puts "\tfor_file_in_dir ~/.dotfiles $stdout.puts file'"
end

def flags_passed_in?(flags_arr, num_args = nil)
  num_args ||= ARGV.length
  (ARGV - flags_arr).length != num_args
end

# Main
if flags_passed_in? %w[-h --h --help help]
  usage
  exit
end

allow_dirs = false
allow_dirs_flags = %w[-d --allow-dirs]
if flags_passed_in? allow_dirs_flags
  allow_dirs = true
  allow_dirs_flags.each { |flag| ARGV.delete flag }
end

file_name_only = false
file_name_flags = %w[-f --file-name-only]
if flags_passed_in? file_name_flags
  file_name_only = true
  file_name_flags.each { |flag| ARGV.delete flag }
end

case ARGV.length
when 2
  dir = ARGV[0]
  code_str = ARGV[1]
when 1
  dir = '.'
  code_str = ARGV[0]
else
  err = ArgumentError.new "ArgumentError: Wrong number of arguments: expected 1 or 2, received #{ARGV.length}"
  $stdout.puts usage(err)
  exit
end

dir = dir[-1] == '/' ? dir[0...-1] : dir

prc = proc { |_file| eval(code_str) }

files = Dir.glob("#{dir}/*", File::FNM_DOTMATCH)[2..-1] || []
files.each do |file|
  next unless allow_dirs || File.file?(file)

  file = file.split("/").last if file_name_only
  prc.call(file)
end
