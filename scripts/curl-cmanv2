#!/usr/bin/env ruby -w

###############
# Setup/Usage #
###############
# This needs the `faker` gem to work. If you don't already have the `faker` gem run:
# `gem install faker`

# # These are the directory and file the script will live in; feel free to change these to fit your environment:
# curlcmanv2_root_dir="$HOME/.curlcmanv2"
# curlcmanv2_script="$curlcmanv2_root_dir/curl-cmanv2"
# mkdir -p $curlcmanv2_root_dir
# curl "https://raw.githubusercontent.com/scottyschup/dotfiles/main/scripts/curl-cmanv2" > $curlcmanv2_script
# chmod +x $curlcmanv2_script

# # The following adds the campaign generator dir to your path so you can run it with `curl-cmanv2` rather than having to type `~/.curlcmanv2/curl-cmanv2` each time
# # Change the path/name for your `.zshrc` if it's not in your home dir
# echo "export PATH=$curlcmanv2_root_dir"':$PATH' >> "$HOME/.zshrc"

################
# Dependencies #
################
require 'fileutils'
require 'json'
require 'net/http'
require 'openssl'
require 'optparse'
require 'uri'
require 'faker'

#############
# Ruby code #
#############
def titlecase(str)
  str.split(/\s/).map(&:capitalize).join(' ')
end
class V2CampaignTemplate
  def initialize(name: nil)
    @name = name.to_s
  end

  def random_x_digit_number(x)
    (rand * (10 ** x)).floor
  end

  def placements_hash
    [
      [
        {
          placementType: 'resources_page_featured_promo',
          productType: 'resources',
          productPlacementCategory: 'resources_page_placements',
          imageUrl: 'https://rally-prod.s3.amazonaws.com/campaign/engage/pod/hero-07.png',
          headline: 'Monday Refresh',
          body: 'Start every week in a positive frame of mind. Begin with the Monday Refresh practice and\\nenjoy the benefits all week long!',
          priority: 800,
          colorPair: {
            background: 'white',
            foreground: 'black',
          },
          cta: {
            ctaType: 'url',
            ctaText: 'Check it Out!',
            ctaValue: 'http://google.com'
          },
          theme: 'rallyWhite',
        },
        {
          placementType: 'engage_dashboard',
          productType: 'engage',
          productPlacementCategory: 'engage_placements',
          priority: 100,
          headline: 'Do all placements have headlines?',
          colorPair: {
            background: 'white',
            foreground: 'black',
          },
          theme: 'rallyWhite',
        },
        {
          placementType: 'engage_dashboard_banner',
          productType: 'engage',
          productPlacementCategory: 'engage_placements',
          priority: 100,
          headline: "Hi! I'm a headline!",
          colorPair: {
            background: 'white',
            foreground: 'black',
          },
          theme: 'rallyRedMedium',
        },
        {
          placementType: 'advantage_mobile_dashboard',
          productType: 'engage',
          productPlacementCategory: 'engage_placements',
          priority: 100,
          headline: 'Something go here',
          colorPair: {
            background: 'white',
            foreground: 'black',
          },
          theme: 'rallyWhite',
        },
      ].sample(rand(3) + 1)
  ].flatten.each_with_object({}) { |el, agg| agg[el[:placementType]] = el }
  end

  def assignment_criteria_arr
    [
      # Great West Life/All Clients
      {
        "product": "engage",
        "partner": "great_west_life",
        "membershipCategories": [],
        "coverageTypeCodes": [],
        "affiliations": [],
        "policyNumbers": [],
        "pvrcCodes": [],
        "excludeClientIds": [],
        "validPlacements": [],
        "startDate": 1500854400000,
        "timeZone": "UTC",
        "overrides": {}
      },
      # Rally/Rally Employees
      {
        product: 'advantage',
        partner: 'rally',
        client: 'rally_employees',
        membershipCategories: [],
        coverageTypeCodes: [],
        affiliations: [],
        policyNumbers: [],
        pvrcCodes: [],
        excludeClientIds: [],
        validPlacements: [],
        startDate: 1500854400000,
        timeZone: 'UTC',
        overrides: {},
      },
      #  Optum/All Clients
      {
        product: 'advantage',
        partner: 'optum',
        membershipCategories: [],
        coverageTypeCodes: [],
        affiliations: [
          'optum_babcock_power_aff_201512335_213537_OFor',
          'optum_babcock_power_aff_201512335_213537_TN1L',
          'optum_babcock_power_aff_201512335_213537_cQKN'
        ],
        policyNumbers: [],
        pvrcCodes: [],
        excludeClientIds: [],
        startDate: 1598632180684,
        timeZone: 'UTC',
        overrides: {},
      },
      # All partners/all clients
      {
        product: 'arcade',
        lineOfBusiness: 'M&R',
        membershipCategories: [
          'MEDICA',
          'PCP',
        ],
        coverageTypeCodes: [],
        affiliations: [],
        policyNumbers: [],
        pvrcCodes: [],
        excludeClientIds: [],
        validPlacements: [],
        startDate: 1513486800000,
        timeZone: 'UTC',
        overrides: {},
      },
      # Kaiser Permanente/Kaiser Base (the only client in our dev tenant)
      {
        product: 'advantage',
        partner: 'kaiser_permanente',
        client: 'kaiser_base',
        membershipCategories: [],
        coverageTypeCodes: [],
        affiliations: [],
        policyNumbers: [],
        pvrcCodes: [],
        excludeClientIds: [],
        validPlacements: [],
        startDate: 1599038800058,
        timeZone: 'UTC',
        overrides: {}
      }
    ].sample(rand(4) + 2) # pick 2 to 5 of the above assignments
  end

  def create
    uuid = random_x_digit_number 7
    {
      id: "12345-abcd-#{uuid}",
      name: "#{@name + ' '}campaign #{uuid}",
      labels: [],
      comment: '',
      assignmentCriteria: assignment_criteria_arr,
      placements: placements_hash,
      metadata: {
        activityId: {
          id: 'OPTUM.ENGAGE.GOTFLUSHOT.ATTEST',
        },
      },
      tagApplicationLogic: {
        includedTags: {
          criteria: [
            'realAge=23',
            'realAge=24',
          ],
          logicalOperator: 'AND',
        },
        excludedTags: {
          criteria: ['realAge=23'],
          logicalOperator: 'AND',
        },
      },
      status: 'draft' # this prop isn't really used anymore, but without it, or with an invalid value the req fails
    }
  end
end

class V2CampaignManagerClient
  CURL_CMAN_V2_ROOT_DIR ||= `echo $HOME/.curlcmanv2`.chomp.freeze
  LAST_USED_FILE_NAME ||= 'last_used_values.txt'.freeze
  FILE_DELIMITER ||= '<:::>'.freeze

  KWARG_DEFAULTS ||= {
    http_method: 'POST'.freeze,
    num_requests: 1,
    path: 'rest/campaignmanager/v2/versionedCampaign'.freeze,
    tenant: 'thankful-diet'.freeze,
  }

  KWARG_NAMES = %i(
    cookie
    xsrf_token
    http_method
    data
    no_data
    num_requests
    path
    tenant
  ).freeze

  def self.edit_last_used_args
    file_path = "#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}"
    $stdout.puts("Opening #{file_path}")
    `open #{file_path}`
  end

  def self.show_last_used_args
    file_path = "#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}"
    $stdout.puts("Opening #{file_path}")
    $stdout.puts(`cat #{file_path}`)
  end

  def initialize(last_used: false, verbose: false, **kwargs)
    $stdout.puts("Initializing with kwargs: \n#{{ last_used: last_used, verbose: verbose, kwargs: kwargs }}\n\n")
    @verbose = verbose
    last_used_values = last_used ? fetch_last_used_values : {}

    # Process kwargs
    KWARG_NAMES.each do |kwarg_name|
      ivar_name = ivarize(kwarg_name)
      ivar_val = kwargs[kwarg_name] || last_used_values[kwarg_name] || KWARG_DEFAULTS[kwarg_name]

      $stdout.puts("Setting ivar #{ivar_name} => #{ivar_val}") if @verbose
      instance_variable_set(ivar_name, ivar_val)
    end

    # Post-processing
    @path = @path.start_with?('/') ? @path[1..-1] : @path
    extract_xsrf_token_from_cookie

    missing_required_arg? ? raise_missing_required_arg : update_last_used_values
  end

  def extract_xsrf_token_from_cookie(cookie = nil)
    @xsrf_token ||= (cookie || @cookie)&.split('XSRF-TOKEN=')&.last
  end

  def ivarize(str)
    "@#{str}".to_sym
  end

  def fetch_last_used_values
    FileUtils.mkdir_p(CURL_CMAN_V2_ROOT_DIR) unless File.directory?(CURL_CMAN_V2_ROOT_DIR)
    File.readlines("#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}").each_with_object({}) do |line, obj|
      ivar_name, ivar_val = line.chomp.split(FILE_DELIMITER)
      obj[ivar_name[1..-1].to_sym] = ivar_name == "@num_requests" ? ivar_val.to_i : ivar_val
    end
  end

  def update_last_used_values
    $stdout.puts("\nUpdating last used values") if @verbose

    FileUtils.mkdir_p(CURL_CMAN_V2_ROOT_DIR) unless File.directory?(CURL_CMAN_V2_ROOT_DIR)
    File.open("#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}", 'w') do |file|
      KWARG_NAMES.each do |kwarg_name|
        $stdout.puts("#{kwarg_name}: #{instance_variable_get(ivarize(kwarg_name))}") if @verbose
        file.puts("@#{kwarg_name}#{FILE_DELIMITER}#{instance_variable_get(ivarize(kwarg_name))}")
      end
    end
  end

  def missing_required_arg?
    [@cookie, @tenant, @path, @xsrf_token].any? { |ivar| ivar.nil? || ivar.empty? }
  end

  def raise_missing_required_arg
    $stderr.puts 'Missing a required argument:'
    $stderr.puts "\tcookie     => #{@cookie}"
    $stderr.puts "\tpath       => #{@path}"
    $stderr.puts "\ttenant     => #{@tenant}"
    $stderr.puts "\txsrf_token => #{@xsrf_token}"
    exit 2
  end

  def run
    resp = nil

    @num_requests.to_i.times do |i|
      iter = i + 1
      data = @data || (
        @no_data ?
          '' :
          V2CampaignTemplate.new(name: titlecase(Faker::Company.catch_phrase)).create
      )

      if @verbose
        $stdout.puts "\nGenerating request #{iter} of #{@num_requests} with args:"
        $stdout.puts "\ttenant => #{@tenant}"
        $stdout.puts "\tmethod => #{@http_method}"
        $stdout.puts "\tpath => #{@path}"
        $stdout.puts "\txsrf_token => #{@xsrf_token}"
        $stdout.puts "\tcookie => #{@cookie}"
        $stdout.puts "\tdata => #{data}"
        $stdout.puts
      end

      uri = URI.parse("https://rallyengine.#{@tenant}.rally-dev.com/#{@path}")
      request = @http_method == 'POST' ? Net::HTTP::Post.new(uri) : Net::HTTP::Get.new(uri)
      request['Accept'] = 'application/json, text/plain, */*'
      request['Accept-Language'] = 'en-US,en;q=0.9'
      request['Cache-Control'] = 'no-cache'
      request['Connection'] = 'keep-alive'
      request['Content-Type'] = 'application/x-www-form-urlencoded'
      request['Cookie'] = @cookie
      request['Pragma'] = 'no-cache'
      request['Referer'] = "https://rallyengine.#{@tenant}.rally-dev.com"
      request['X-XSRF-TOKEN'] = @xsrf_token
      request['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36'
      request.body = @no_data ? nil : JSON.dump(data)

      req_options = {
        use_ssl: uri.scheme == 'https',
        verify_mode: OpenSSL::SSL::VERIFY_NONE,
      }

      $stdout.puts '**************************************************************'
      $stdout.puts "REQUEST #{iter} of #{@num_requests}"
      $stdout.puts "method:    #{request.method}"
      $stdout.puts "has data?: #{request.response_body_permitted? && !!request.body}"
      $stdout.puts "endpoint:  #{request.uri}"

      resp = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end

      # TODO track successes/failures and generate a report
      $stdout.puts '**************************************************************'
      $stdout.puts "RESPONSE #{iter}"
      $stdout.puts "code: #{resp.code}"
      $stdout.puts "msg:  #{resp.body}" if @verbose

      if resp.code.to_i != 200
        $stderr.puts "Something happened! :("
        $stderr.puts "Response: #{resp.code} #{resp.body}"
        exit 3
      end

      break if @data # if custom data was passed in, don't make same request multiple times
    end

    # Return last response
    resp
  end
end

################
# Shell script #
################
# def usage; end

if $PROGRAM_NAME == __FILE__
  # OPTIONS PARSING
  options = {}
  OptionParser.new do |opts|
    # opts.banner = usage
    opts.on('-cCOOKIE', '--cookie=COOKIE', 'A valid cookie') do |cookie|
      options[:cookie] = cookie
    end

    opts.on('-dDATA', '--data=DATA', 'A stringified JSON data object to send with request') do
      options[:data] = true
    end

    opts.on('-D', '--no-data', 'Do not include a data object with the request') do
      options[:no_data] = true
    end

    opts.on('-e', '--edit-last-used-args', 'Edit the stored args from the last call') do
      options[:edit_last_used] = true
    end

    opts.on('-l', '--last-used-args', 'Re-use the stored args from the last call') do
      options[:last_used] = true
    end

    opts.on('-mMETHOD', '--method=METHOD', 'The method to send in the HTTP req') do |http_method|
      options[:http_method] = http_method
    end

    opts.on('-nNUMBER', '--number=NUMBER', 'The number of times to perform the request') do |number|
      options[:num_requests] = number.to_i
    end

    opts.on(
      '-P',
      '--no-prompt-if-optional',
      'Disable interactive prompts for missing values if a default value exists',
    ) do
      options[:no_prompt] = true
    end


    opts.on('-pPATH', '--path=PATH', 'The endpoint to CURL') do |path|
      options[:path] = path
    end

    opts.on('-s', '--show-last-used-args', 'Display the stored args used in the last call') do
      options[:show_last_used] = true
    end

    opts.on('-tTENANT', '--tenant=TENANT', 'The dev tenant to send the CURL req to') do |tenant|
      options[:tenant] = tenant
    end

    opts.on('-v', '--verbose', 'More loquacious') do
      options[:verbose] = true
    end

    opts.on(
      '-xTOKEN',
      '--xsrf-token=TOKEN',
      'DEPRECATED: no longer necessary as script will extract this value from the cookie'
    ) do |xsrf_token|
      options[:xsrf_token] = xsrf_token
    end

    opts.on_tail('-h', '--help', 'Show this help message') do
      puts opts
      exit
    end
  end.parse!

  $stdout.puts(options) if options[:verbose]

  if options[:edit_last_used]
    V2CampaignManagerClient.edit_last_used_args
    exit
  end

  if options[:show_last_used]
    V2CampaignManagerClient.show_last_used_args
    exit
  end

  # DATA COLLECTION
  unless options[:last_used]
    ## Required values
    options[:cookie] ||= ''
    # options[:xsrf_token] ||= ''

    while options[:cookie].empty?
      $stdout.puts "\nEnter a valid cookie [REQUIRED] (paste from the headers of a recent RallyEngine call to the desired tenant):"
      options[:cookie] = $stdin.gets.strip
    end

    # DEPRECATED: this value can be extracted from the cookie string
    # while options[:xsrf_token].empty?
    #   $stdout.puts "\nEnter a valid xsrf_token [REQUIRED] (paste from the headers of a recent RallyEngine call to the desired tenant):"
    #   options[:xsrf_token] = $stdin.gets.strip
    # end

    ## Optional values
    unless options[:no_prompts]
      if options[:path].nil?
        $stdout.puts "\nPath defaults to '#{V2CampaignManagerClient::KWARG_DEFAULTS[:path]}'; press <return> to use this path or enter a different one:"
        path_input = $stdin.gets.chomp
        options[:path] = path_input unless path_input.empty?
      end

      if options[:tenant].nil?
        $stdout.puts "\nTenant defaults to '#{V2CampaignManagerClient::KWARG_DEFAULTS[:tenant]}'; press <return> to use this tenant or enter a different tenant name:"
        tenant_input = $stdin.gets.chomp
        options[:tenant] = tenant_input unless tenant_input.empty?
      end

      if options[:http_method].nil?
        $stdout.puts "\nMethod defaults to '#{V2CampaignManagerClient::KWARG_DEFAULTS[:http_method]}'; press <return> to use the default value or enter a different HTTP verb:"
        method_input = $stdin.gets.chomp.upcase
        options[:http_method] = method_input unless method_input.empty?
        options[:no_data] = true if method_input == 'GET'
      end

      if options[:num_requests].nil?
        $stdout.puts "\nThe request will be sent once by default; press <return> to use the default value or enter a number >1 to send the request multiple times:"
        num_requests_input = $stdin.gets.chomp
        options[:num_requests] = num_requests_input.to_i unless num_requests_input.empty?
      end

      if !options[:no_data] && options[:data].nil?
        $stdout.puts "\nSemi-random data will be generated by default; press <return> to use the default data, <n> to send no data, or enter a different stringified JSON data object:"
        num_requests_input = $stdin.gets.chomp
        options[:no_data] = true if data_input == 'n'
        options[:data] = data_input unless data_input.empty?
      end
    end # end optional section
  end

  V2CampaignManagerClient.new(**options).run
end
