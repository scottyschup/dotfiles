#!/usr/bin/env ruby -w

###############
# Setup/Usage #
###############
# This needs the `faker` gem to work. If you don't already have the `faker` gem run:
# `gem install faker`

# # These are the directory and file the script will live in; feel free to change these to fit your environment:
# curlcmanv2_root_dir="$HOME/.curlcmanv2"
# curlcmanv2_script="$curlcmanv2_root_dir/curl-cmanv2"
# mkdir -p $curlcmanv2_root_dir
# curl "https://raw.githubusercontent.com/scottyschup/dotfiles/main/scripts/curl-cmanv2" > $curlcmanv2_script
# chmod +x $curlcmanv2_script

# # The following adds the campaign generator dir to your path so you can run it with `curl-cmanv2` rather than having to type `~/.curlcmanv2/curl-cmanv2` each time
# # Change the path/name for your `.zshrc` if it's not in your home dir
# echo "export PATH=$curlcmanv2_root_dir"':$PATH' >> "$HOME/.zshrc"

################
# Dependencies #
################
require 'fileutils'
require 'json'
require 'net/http'
require 'openssl'
require 'optparse'
require 'uri'
require 'faker'
require 'pry'

#############
# Ruby code #
#############
def titlecase(str)
  str.split(/\s/).map(&:capitalize).join(' ')
end

class V2CampaignTemplate
  def initialize(name: nil)
    @name = name.to_s
  end

  def random_x_digit_number(x)
    (rand * (10**x)).floor
  end

  def placements_hash(product)
    advantage_placements = [
      {
        placementType: 'dashboard_targeted_content',
        productType: 'advantage',
        productPlacementCategory: 'advantage_dashboard_placements',
        imageUrl: 'https://s3.amazonaws.com/rally-non-prod/campaign/engage/pod/hero-07.png',
        headline: 'Monday Refresh',
        body: 'Start every week in a positive frame of mind. Begin with the Monday Refresh practice and enjoy the benefits all week long!',
        priority: 800,
        colorPair: {
          background: 'white',
          foreground: 'black',
        },
        cta: {
          ctaType: 'url',
          ctaText: 'Check it Out!',
          ctaValue: 'http://google.com',
        },
        theme: 'rallyWhite',
      },
      rand() >= 0.5 ? nil : {
        "placementType": "advantage_dashboard_banner",
        "productType": "advantage",
        "productPlacementCategory": "advantage_dashboard_placements",
        "imageUrl": "https://s3.amazonaws.com/rally-non-prod/campaign/engage/pod/hero-07.png",
        "headline": "Questions about COVID-19?",
        "body": "Stay informed and get all the latest health updates.",
        "priority": 800,
        "colorPair": {
          "background": "white",
          "foreground": "black"
        },
        "cta": {
          "ctaType": "url",
          "ctaText": "Letâ€™s Go",
          "ctaValue": "http://google.com"
        },
        "theme": "rallyWhite"
      },
    ].compact

    arcade_placements = [
      {
        placementType: 'arcade_carousel',
        productType: 'arcade',
        productPlacementCategory: 'arcade_dashboard_placements',
        priority: 600,
        headline: 'Do all placements have headlines?',
        body: 'This is required, even though it says optional in the UI :(',
        imageUrl: 'https://s3.amazonaws.com/rally-non-prod/campaign/engage/pod/hero-07.png',
        colorPair: {
          background: 'white',
          foreground: 'black',
        },
        theme: 'rallyWhite',
      },
      rand() >= 0.5 ? nil : {
        placementType: 'arcade_rx',
        productType: 'arcade',
        productPlacementCategory: 'arcade_secondary_placements',
        priority: 300,
        headline: 'Do all placements have headlines?',
        body: 'This is required, even though it says optional in the UI :(',
        imageUrl: 'https://s3.amazonaws.com/rally-non-prod/campaign/engage/pod/hero-07.png',
        colorPair: {
          background: 'white',
          foreground: 'black',
        },
        theme: 'rallyWhite',
      },
    ].compact

    case product
    when 'advantage'
      advantage_placements
    when 'arcade'
      arcade_placements
    when 'both'
      advantage_placements + arcade_placements
    else
      []
    end.each_with_object({}) { |el, agg| agg[el[:placementType]] = el }
  end

  def assignment_criteria_arr(product)
    advantage_criteria = [
      # All Partners/All Clients
      rand() >= 0.5 ? {
        affiliations: [],
        coverageTypeCodes: [],
        excludeClientIds: [],
        membershipCategories: [],
        overrides: {},
        policyNumbers: [],
        product: "advantage",
        pvrcCodes: [],
        startDate: 1_500_854_400_000,
        timeZone: "UTC",
        validPlacements: [],
      } : {
        affiliations: [],
        coverageTypeCodes: [],
        excludeClientIds: [],
        membershipCategories: [],
        overrides: {
          dashboard_targeted_content: {
            priority: 400,
            ctaValue: 'https://weather.com',
          },
        },
        policyNumbers: [],
        product: "advantage",
        pvrcCodes: [],
        startDate: 1_500_854_400_000,
        timeZone: "UTC",
        validPlacements: [],
      },
      # Kaiser Permanente/Kaiser Base (the only partner with a client in dev tenants)
      {
        affiliations: [],
        client: 'kaiser_base',
        coverageTypeCodes: [],
        excludeClientIds: [],
        membershipCategories: [],
        overrides: {},
        partner: 'kaiser_permanente',
        policyNumbers: [],
        product: 'advantage',
        pvrcCodes: [],
        startDate: 1_599_038_800_058,
        timeZone: 'UTC',
        validPlacements: [],
      },
      {
        product: 'engage',
        partner: 'kaiser_permanente',
        client: 'kaiser_base',
        affiliations: [
          'kaiser_base_default',
        ],
        membershipCategories: [],
        coverageTypeCodes: [],
        policyNumbers: [],
        pvrcCodes: [],
        excludeClientIds: [],
        validPlacements: [],
        startDate: 1_628_410_080_000,
        timeZone: 'UTC',
        overrides: {
          dashboard_targeted_content: {
            priority: 800,
            ctaValue: 'http://google.com',
          },
        },
      },
    ].sample(rand(1..3))

    arcade_criteria = [
      #  Optum/all clients M&R
      rand() >= 0.5 ? {
        affiliations: [],
        coverageTypeCodes: %w[HIP HIPRIDER MA MAPD],
        excludeClientIds: [],
        lineOfBusiness: 'M&R',
        membershipCategories: ['MEDICA', 'UHC', 'TEXAS ERS'],
        overrides: {},
        partner: 'optum',
        policyNumbers: ['1234'],
        product: 'arcade',
        pvrcCodes: ['abcd'],
        startDate: 1_598_632_180_684,
        timeZone: 'UTC',
        validPlacements: [],
      } : {
        "affiliations": [],
        "membershipCategories": [
          "UHC"
        ],
        "coverageTypeCodes": [
          "PDP",
          "SSP",
          "MEDSUPP"
        ],
        "policyNumbers": [
          "12341234"
        ],
        "pvrcCodes": [
          "asdffdsa"
        ],
        "excludeClientIds": [],
        "validPlacements": [],
        "startDate": 1641016800000,
        "timeZone": "America/Chicago",
        "overrides": {
          "dashboard_targeted_content": {
            "priority": 800
          }
        },
        "product": "arcade",
        "lineOfBusiness": "M&R"
      },
      # Optum/all clients C&S
      {
        affiliations: [],
        coverageTypeCodes: [],
        excludeClientIds: [],
        lineOfBusiness: 'C&S',
        membershipCategories: [],
        overrides: {},
        partner: 'optum',
        policyNumbers: ['12345'],
        product: 'arcade',
        pvrcCodes: ['edcba'],
        startDate: 1_513_486_800_000,
        timeZone: 'UTC',
        validPlacements: [],
      },
      #  Optum/all clients E&I
      {
        affiliations: [],
        coverageTypeCodes: [],
        excludeClientIds: [],
        lineOfBusiness: 'E&I',
        membershipCategories: ['JPMC', 'OXFORD', 'UHC West'],
        overrides: {},
        partner: 'optum',
        policyNumbers: ['1234'],
        product: 'arcade',
        pvrcCodes: ['abcd'],
        startDate: 1_598_632_180_684,
        timeZone: 'UTC',
        validPlacements: [],
      },
    ].sample(rand(1..3)) # pick 2 to 3 of the above 3 assignments

    case product
    when 'advantage'
      advantage_criteria
    when 'arcade'
      arcade_criteria
    when 'both'
      advantage_criteria + arcade_criteria
    else
      []
    end
  end

  def create(product: 'both')
    {
      id: "6108f6c56a74220001#{random_x_digit_number 6}",
      name: "#{@name} Campaign",
      labels: [rand(2).zero? ? 'isEmployerBuyUp' : nil].compact,
      comment: '',
      assignmentCriteria: assignment_criteria_arr(product),
      placements: placements_hash(product),
      metadata: {
        activityId: {
          id: 'OPTUM.ENGAGE.GOTFLUSHOT.ATTEST',
        },
      },
      tagApplicationLogic: rand() >= 0.8 ? {
        includedTags: {
          criteria: [],
          logicalOperator: 'AND',
        },
        excludedTags: {
          criteria: [
            'realAge=18',
            'realAge=19',
            'realAge=20',
          ],
          logicalOperator: 'OR',
        },
      } : {
        includedTags: {
          criteria: [],
          logicalOperator: 'OR',
        },
        excludedTags: {
          criteria: [],
          logicalOperator: 'OR',
        },
      },
      status: 'draft', # this prop isn't really used anymore, but without it, or with an invalid value the req fails
    }
  end
end

class CmanApiClient
  CURL_CMAN_V2_ROOT_DIR = `echo $HOME/.curlcmanv2`.chomp.freeze
  LAST_USED_FILE_NAME = 'last_used_values.txt'.freeze
  FILE_DELIMITER = '<:::>'.freeze

  KWARG_DEFAULTS = {
    http_method: 'POST'.freeze,
    num_requests: 1,
    paths: ['rest/campaignmanager/v2/versionedCampaign'.freeze].freeze,
    tenant: 'thankful-diet'.freeze,
  }.freeze

  KWARG_NAMES = %i[
    cookie
    xsrf_token
    http_method
    data
    num_requests
    paths
    tenant
  ].freeze

  def self.edit_last_used_args
    file_path = "#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}"
    $stdout.puts("Opening #{file_path}")
    `open #{file_path}`
  end

  def self.show_last_used_args
    file_path = "#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}"
    $stdout.puts("Opening #{file_path}")
    $stdout.puts(`cat #{file_path}`)
  end

  def initialize(last_used: false, reset: [], verbose: false, no_data: false, **kwargs)
    $stdout.puts(
      "Initializing with kwargs: \n#{
        { last_used: last_used, reset: reset, verbose: verbose, no_data: no_data, kwargs: kwargs }
      }\n\n"
    )
    @verbose = verbose
    @reset = reset
    last_used_values = last_used ? fetch_last_used_values : {}

    # Process kwargs
    KWARG_NAMES.each do |kwarg_name|
      ivar_name = ivarize(kwarg_name)
      ivar_val = kwargs[kwarg_name] || last_used_values[kwarg_name] || KWARG_DEFAULTS[kwarg_name]

      $stdout.puts("Setting ivar #{ivar_name} => #{ivar_val}") if @verbose
      instance_variable_set(ivar_name, ivar_val)
    end

    # Post-processing
    @paths = @paths.map { |path| path.start_with?('/') ? path[1..-1] : path }
    @http_method = @http_method.upcase
    @no_data = no_data || @http_method == 'GET'
    @data = nil if @no_data
    extract_xsrf_token_from_cookie

    missing_required_arg? ? raise_missing_required_arg : update_last_used_values
  end

  def extract_xsrf_token_from_cookie(cookie = nil)
    @xsrf_token ||= (cookie || @cookie)&.split('XSRF-TOKEN=')&.last&.split('; ')&.first
  end

  def ivarize(str)
    "@#{str}".to_sym
  end

  def fetch_last_used_values
    FileUtils.mkdir_p(CURL_CMAN_V2_ROOT_DIR) unless File.directory?(CURL_CMAN_V2_ROOT_DIR)
    File.readlines("#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}").each_with_object({}) do |line, obj|
      ivar_name, ivar_val = line.chomp.split(FILE_DELIMITER)
      next if @reset.include? ivar_name[1..-1]

      obj[ivar_name[1..-1].to_sym] = ivar_name == "@num_requests" ? ivar_val.to_i : ivar_val
    end
  end

  def update_last_used_values
    $stdout.puts("\nUpdating last used values") if @verbose

    FileUtils.mkdir_p(CURL_CMAN_V2_ROOT_DIR) unless File.directory?(CURL_CMAN_V2_ROOT_DIR)
    File.open("#{CURL_CMAN_V2_ROOT_DIR}/#{LAST_USED_FILE_NAME}", 'w') do |file|
      KWARG_NAMES.each do |kwarg_name|
        $stdout.puts("#{kwarg_name}: #{instance_variable_get(ivarize(kwarg_name))}") if @verbose
        file.puts("@#{kwarg_name}#{FILE_DELIMITER}#{instance_variable_get(ivarize(kwarg_name))}")
      end
    end
  end

  def missing_required_arg?
    [@cookie, @tenant, @paths, @xsrf_token].any? { |ivar| ivar.nil? || ivar.empty? }
  end

  def raise_missing_required_arg
    $stderr.puts 'Missing a required argument:'
    $stderr.puts "\tcookie     => #{@cookie}"
    $stderr.puts "\tpaths       => #{@paths}"
    $stderr.puts "\ttenant     => #{@tenant}"
    $stderr.puts "\txsrf_token => #{@xsrf_token}"
    exit 2
  end

  def run
    resp = nil
    total_num_reqs = @num_requests * @paths.length

    @num_requests.to_i.times do |i|
      data = if @no_data
          nil
        else
          (@data || V2CampaignTemplate
            .new(name: titlecase(Faker::Company.catch_phrase))
            .create(product: %w[arcade advantage both].sample)
          )
        end

      @paths.each_with_index do |path, j|
        iter = (i * 2) + j + 1

        if @verbose
          $stdout.puts "\nGenerating request #{iter} of #{total_num_reqs} with args:"
          $stdout.puts "\ttenant => #{@tenant}"
          $stdout.puts "\tmethod => #{@http_method}"
          $stdout.puts "\tpaths => #{@paths}"
          $stdout.puts "\txsrf_token => #{@xsrf_token}"
          $stdout.puts "\tcookie => #{@cookie}"
          $stdout.puts "\tdata => #{data.to_json}"
          $stdout.puts
        end

        uri = URI.parse("https://rallyengine.#{@tenant}.rally-dev.com/#{path}")
        request = case @http_method
                  when 'POST'
                    Net::HTTP::Post.new(uri)
                  when 'PUT'
                    Net::HTTP::Put.new(uri)
                  else
                    Net::HTTP::Get.new(uri)
                  end
        request['Accept'] = 'application/json, text/plain, */*'
        request['Accept-Language'] = 'en-US,en;q=0.9'
        request['Cache-Control'] = 'no-cache'
        request['Connection'] = 'keep-alive'
        request['Content-Type'] = 'application/x-www-form-urlencoded'
        request['Cookie'] = @cookie
        request['Pragma'] = 'no-cache'
        request['Referer'] = "https://rallyengine.#{@tenant}.rally-dev.com"
        request['X-XSRF-TOKEN'] = @xsrf_token
        request['User-Agent'] =
          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36'
        request.body = data && !@no_data ? JSON.dump(data) : nil

        req_options = {
          use_ssl: uri.scheme == 'https',
          verify_mode: OpenSSL::SSL::VERIFY_NONE,
        }

        $stdout.puts '**************************************************************'
        $stdout.puts "REQUEST #{iter} of #{total_num_reqs}"
        $stdout.puts "method:    #{request.method}"
        $stdout.puts "has data?: #{request.response_body_permitted? && !request.body.nil?}"
        $stdout.puts "endpoint:  #{request.uri}"

        resp = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
          http.request(request)
        end

        # TODO: track successes/failures and generate a report
        $stdout.puts '------------------------------'
        $stdout.puts "RESPONSE #{iter} of #{total_num_reqs}"
        $stderr.puts "Something happened! :(" if resp.code.to_i >= 300
        $stdout.puts "Resp code: #{resp.code}"
        $stdout.puts "Resp msg:  #{resp.body}" if @verbose

        if resp.code.to_i >= 300
          begin
            # Pretty print the description part of the error message
            json_errors = JSON.parse(JSON.parse(resp.body)['description'].split('JsonErrors: ').last)
            $stderr.puts
            $stderr.puts('Error description:')
            $stderr.send(:pp, json_errors)
          rescue JSON::ParserError => err
            $stderr.puts('(JSON Parse Error while trying to pretty-print part of response body)')
            $stderr.puts("Error: #{err}")
            $stdout.puts
            $stdout.puts("Response body: #{resp.body}")
          end
          exit 3
        end

        $stdout.puts '**************************************************************'
      end
    end

    # Return last response
    resp
  end
end

################
# Shell script #
################
def get_user_input(options, key)
  (options[key.to_sym].nil? || options[key.to_sym].empty?) &&
    (!options[:last_used] || options[:reset]&.include?(key.to_s))
end

if $PROGRAM_NAME == __FILE__
  # OPTIONS PARSING
  options = {}
  OptionParser.new do |opts|
    # opts.banner = usage
    opts.on('-a', '--use-stored-auth', 'Use the stored cookie and XSRF token only') do
      options[:last_used] = true
      options[:reset] = %w[data http_method num_requests paths tenant]
    end

    opts.on('-cCOOKIE', '--cookie=COOKIE', 'A valid cookie') do |cookie|
      options[:cookie] = cookie
    end

    opts.on('-dDATA', '--data=DATA', 'A stringified JSON data object to send with request') do |data|
      options[:data] = JSON.parse(data)
    rescue JSON::ParserError
      $stderr.puts('JSON Parse Error')
      $stdout.puts('Try again! Paste you stringified JSON here (without quotes around it)')
      $stdout.print('> ')
      data = $stdin.gets.chomp

      retry
    end

    opts.on('-D', '--no-data', 'Do not include a data object with the request') do
      options[:no_data] = true
    end

    opts.on('-e', '--edit-last-used-args', 'Edit the stored args from the last call') do
      options[:edit_last_used] = true
    end

    opts.on('-l', '--last-used-args', 'Re-use the stored args from the last call') do
      options[:last_used] = true
    end

    opts.on('-mMETHOD', '--method=METHOD', 'The method to send in the HTTP req') do |http_method|
      options[:http_method] = http_method
    end

    opts.on('-nNUMBER', '--number=NUMBER', 'The number of times to perform the request') do |number|
      options[:num_requests] = number.to_i
    end

    opts.on(
      '-P',
      '--no-prompt-if-optional',
      'Disable interactive prompts for missing values if a default value exists'
    ) do
      options[:no_prompt] = true
    end

    opts.on('-pPATHS', '--paths=PATHS',
            "The endpoints to CURL. Pass multiple separate by spaces. Default: #{CmanApiClient::KWARG_DEFAULTS[:paths]}") do |paths|
      options[:paths] = (paths || '').split
    end

    opts.on(
      '-rKEYS',
      '--reset-cached-val=KEYS',
      "Reset last used values for the provided keys:\n#{' ' * 41}A=>Reset All; C=>cookie; D=>data; M=>http_method; N=>num_requests; P=>paths; T=>tenant; U=>All But Auth\n#{' ' * 41}Ex: `-rDPT` to reset data, paths, and tenant"
    ) do |keys|
      options[:reset] = keys.chars.map do |key|
        case key.upcase
        when 'A'
          %w[cookie xsrf_token data http_method num_requests paths tenant]
        when 'C'
          %w[cookie xsrf_token]
        when 'D'
          'data'
        when 'M'
          'http_method'
        when 'N'
          'num_requests'
        when 'P'
          'paths'
        when 'T'
          'tenant'
        when 'U'
          %w[data http_method num_requests paths tenant]
        end
      end.flatten.uniq
    end

    opts.on('-s', '--show-last-used-args', 'Display the stored args used in the last call') do
      options[:show_last_used] = true
    end

    opts.on('-tTENANT', '--tenant=TENANT', 'The dev tenant to send the CURL req to') do |tenant|
      options[:tenant] = tenant
    end

    opts.on('-v', '--verbose', 'More loquacious') do
      options[:verbose] = true
    end

    opts.on(
      '-xTOKEN',
      '--xsrf-token=TOKEN',
      'DEPRECATED: no longer necessary as script will extract this value from the cookie'
    ) do |xsrf_token|
      # options[:xsrf_token] = xsrf_token
      $stdout.puts('The `-x` flag is DEPRECATED as that value is automatically extracted from the cookie') if xsrf_token
    end

    opts.on_tail('-h', '--help', 'Show this help message') do
      puts opts
      exit
    end
  end.parse!

  $stdout.puts(options) if options[:verbose]

  if options[:edit_last_used]
    CmanApiClient.edit_last_used_args
    exit
  end

  if options[:show_last_used]
    CmanApiClient.show_last_used_args
    exit
  end

  # DATA COLLECTION
  unless options[:last_used] && !options[:reset]
    ## Required value
    while get_user_input(options, :cookie)
      $stdout.print "\nEnter a valid cookie [REQUIRED] (paste from the headers of a recent RallyEngine call to the desired tenant):\n> "
      options[:cookie] = $stdin.gets.strip
    end

    ## Optional values
    unless options[:no_prompt]
      if get_user_input(options, :tenant)
        $stdout.print "\nTenant defaults to '#{CmanApiClient::KWARG_DEFAULTS[:tenant]}'; press <return> to use this tenant or enter a different tenant name:\n> "
        tenant_input = $stdin.gets.chomp
        options[:tenant] = tenant_input unless tenant_input.empty?
      end

      if get_user_input(options, :paths)
        $stdout.print "\nPaths defaults to #{CmanApiClient::KWARG_DEFAULTS[:paths]}; press <return> to use these paths or enter different ones:\n> "
        path_input = $stdin.gets.chomp
        options[:paths] = path_input.split unless path_input.empty?
      end

      if get_user_input(options, :http_method)
        $stdout.print "\nMethod defaults to '#{CmanApiClient::KWARG_DEFAULTS[:http_method]}'; press <return> to use the default value or enter a different HTTP verb:\n> "
        method_input = $stdin.gets.chomp.upcase
        options[:http_method] = method_input unless method_input.empty?
        options[:no_data] = true if method_input == 'GET'
      end

      if get_user_input(options, :num_requests)
        $stdout.print "\nThe request will be sent once by default; press <return> to use the default value or enter a number >1 to send the request multiple times:\n> "
        num_requests_input = $stdin.gets.chomp
        options[:num_requests] = num_requests_input.to_i unless num_requests_input.empty?
      end

      if !options[:no_data] && get_user_input(options, :data)
        $stdout.print "\nSemi-random data will be generated by default; press <return> to use the default data, <n> to send no data, or enter a different stringified JSON data object:\n> "
        data_input = $stdin.gets.chomp
        options[:no_data] = true if data_input == 'n'
        options[:data] = data_input unless data_input.empty? || data_input == 'n'
      end
    end
  end

  CmanApiClient.new(**options).run
end
