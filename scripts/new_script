#!/usr/bin/env ruby -w

# USAGE
# new_script SCRIPT_NAME SHEBANG_LANG SHEBANG_FLAGS
def print_usage
  $stdout.puts "Usage: new_script SCRIPT_NAME [SHEBANG_LANG [SHEBANG_FLAGS]]"
  $stdout.puts "\tSCRIPT_NAME should be a unique string without spaces"
  $stdout.puts "\t\t`ls \"$DOTFILES/scripts\"` for list of existing scripts"
  $stdout.puts "\tSHEBANG_LANG defaults to 'ruby'"
  $stdout.puts "\tSHEBANG_FLAGS defaults to '-w'"
end

if ARGV.empty?
  print_usage
  exit
end

scripts_dir = File.dirname(__FILE__)
file_name = "#{scripts_dir}/#{ARGV.shift}"
if File.file?(file_name)
  $stdout.puts("File already exists")
  exit 1
end

language = ARGV.shift || "ruby"
flags = ARGV.shift || (language == "ruby" ? "-w" : "")

body = nil
if language == "ruby"
  body = <<~'BODY'
    ################
    # Dependencies #
    ################
    begin
      verbose = $VERBOSE
      $VERBOSE = nil # Suppress deprecation warnings and the like

      require 'optparse'
      # add more requires here
    rescue LoadError => err
      # Error example:
      #   pry(main)> require 'fake_gem/with/path'
      #   LoadError: cannot load such file -- fake-gem/with/path
      #   from /Users/username/.rbenv/versions/2.4.7/lib/ruby/2.4.0/rubygems/core_ext/kernel_require.rb:55:in `require'
      dependency = err.message.split(' -- ').last
      # Remove '/with/path' from the gem name; noop for all others
      dependency = dependency.split('/').first
      warn "Missing dependency: #{dependency}"
      warn 'Make sure the following command completes successfully before using this script.'
      warn "\tgem install #{dependency}"
      exit 1
    ensure
      $VERBOSE = verbose
    end

    #############
    # Ruby code #
    #############

    # goes here

    ################
    # Shell script #
    ################
    def usage; end

    if $PROGRAM_NAME == __FILE__
      options = {}
      OptionParser.new do |opts|
        # These are mostly just here as examples

        # opts.banner = usage
        # opts.on('-v', '--verbose', 'More loquacious') do
        #   options[:verbose] = true
        # end

        # opts.on('-oVAL', '--option-with-value=VAL', 'Option with value message') do |val|
        #   options[:value] = val
        # end

        # opts.on_tail('-h', '--help', 'Show this help message') do
        #   puts opts
        #   exit
        # end
      end.parse!
    end
  BODY
end

f = File.open(file_name, 'w')
f.puts("#!/usr/bin/env #{language} #{flags}")
f.puts
f.puts body
f.close

# rubocop:disable Style/MultilineTernaryOperator, Style/NestedTernaryOperator
editor_cmd = !`which code`.empty? ?
  'code' : !`which atom`.empty? ?
    'atom' : !`which subl`.empty? ?
      'subl' : 'vim'
`#{editor_cmd} #{file_name}`
