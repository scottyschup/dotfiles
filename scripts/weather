#!/usr/bin/env ruby -w

#############
# Ruby code #
#############
# Extract this into separate script; or better, make install_if_not_installed script
def gem_installed?(gem_name)
  list = `gem list #{gem_name}`
  list.split("\n").any? { |line| line.include?(gem_name) }
end

unless gem_installed? 'activesupport'
  system 'clear'
  $stdout.puts "Installing `activesupport` gem"
  `gem install activesupport 1>&2`
end
require 'active_support/core_ext/numeric/time.rb'

def run_wxr_widget(zip_code = 60640)
  last_update = 5.hours.ago

  while true
    if last_update > 4.hours.ago
      $stdout.print("\rCurrent time => #{Time.now.strftime('%F %T')}")
      sleep 1
      next
    end

    system "clear"
    cmd = `curl -s wttr.in/#{zip_code}?u`
    # cmd = `curl "samiare.net/daily/190128"` # Test URL (so as not to overwhelm wttr.in during dev/testing)
    $stdout.puts(cmd)
    $stdout.puts("Last updated => #{Time.now.strftime('%F %T')}")
    $stdout.puts("Next update  => #{(Time.now + 4.hours).strftime('%F %T')}")
    $stdout.print("Current time => #{Time.now.strftime('%F %T')}") # Gets periodically overwritten in line 13
    last_update = Time.now
  end
end

def usage
  "Get forecast from wttr.in" +
  "\tUsage: `#{__FILE__}` [ZIP_CODE]" +
  "\tZIP_CODE defaults to 60640"
end

################
# Shell script #
################
if $PROGRAM_NAME == __FILE__
  if ['-h', '--help', 'help'].include? ARGV.first
    puts usage
    exit
  end

  run_wxr_widget ARGV.first
end
