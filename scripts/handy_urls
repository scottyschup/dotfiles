#!/usr/bin/env ruby -w

class HandyURLMapper
  def initialize
    @dir = "#{ENV['HOME']}/.hurlmap"
    @file = "#{dir}/index"
    @urls = {}
    `mkdir #{dir}` unless Dir.exist? dir
    `touch #{file}` unless File.exist? file
    read_file!
  end

  def main
    read_file!
    if ARGV.length.zero?
      list_all
      return
    end
    cmd = ARGV.shift
    case cmd.to_sym
    when :list, :ls, :all
      list_all
    when :add
      add(*ARGV.shift(2))
    when :delete, :del, :remove, :rm
      delete ARGV.shift
    else
      usage
    end
  end

  def add(key, url)
    unless valid_url? url
      $stderr.puts("#{url} is not a valid URL.")
      return
    end
    @urls[key] = url
    res = write_to_file!
    res ? [key, url] : $stderr.puts("URL for #{key} not added.")
  end

  def delete(key)
    res = @urls.delete key
    res || $stdout.puts("404 #{key} not found.")
  end

  def list_all
    column_width = @urls.keys.map(&:length).max
    @urls.each do |key, url|
      $stdout.puts "#{key.ljust(column_width)} => #{url}"
    end
    @urls
  end

  def read_file!
    File.readlines("~/.hurlmap/index").each do |line|
      key, val = line.chomp.split(" *** ")
      @urls[key] = val
    end
    @urls
  end

  def usage
    $stdout.puts ""
  end

  def valid_url?(url)
    url =~ %r{^https?://\w*\.\w*$}
  end

  def write_to_file!
    file = File.open(@file, "w")
    @urls.each do |key, val|
      file.puts "#{key} *** #{val}"
    end
    file.close
    true
  rescue StandardError => e
    $stderr.puts e
    false
  end
end
