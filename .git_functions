#!/usr/bin/bash
# To use personal git settings on work laptop:
#   * upgl (use personal git local)
#   * change git@github.com:scottyschup/repo.git to git@github.com.personal:scottyschup/repo.git
#
# To set up:
#   * `ssh-keygen -t rsa -C "ssschupbach@gmail.com" -f "id_rsa_personal"`
#   * `vim ~/.ssh/config`
#   * Add:
#   ```sh
#   # Work account (default)
#   Host github.com
#     HostName github.com
#     User git
#     IdentityFile ~/.ssh/id_rsa
#   # Personal account
#   Host github.com.personal
#     HostName github.com
#     User git
#     IdentityFile ~/.ssh/id_rsa_personal
#   ```

####################
# Git autocomplete #
####################
# from: https://stackoverflow.com/a/46696505
# our handler that returns choices by populating Bash array COMPREPLY
# (filtered by the currently entered word ($2) via compgen builtin)

# _git_branch_autocomplete() {
#     branches=$(git branch -l | cut -c3-)
#     COMPREPLY=($(compgen -W "$branches" -- "$2"))
# }

# we now register our handler to provide completion hints for the "gitpull" command

# complete -F git_branch_delete _git_branch_autocomplete
# complete -F git_branch_delete_usage _git_branch_autocomplete
# complete -F git_branch_delete_local _git_branch_autocomplete
# complete -F git_branch_delete_remote _git_branch_autocomplete
# complete -F git_branch_delete_local_and_remote _git_branch_autocomplete
# complete -F git_branch_set_upstream _git_branch_autocomplete
# complete -F git_checkout _git_branch_autocomplete
# complete -F git_checkout_last _git_branch_autocomplete
# complete -F git_checkout_safe_force _git_branch_autocomplete

########################
# Custom Git functions #
########################

# DEPRECATED: use `git_branch_history current` instead
function git_current_branch {
  git symbolic-ref HEAD 2>/dev/null | cut -d "/" -f 3
}
alias current_git_branch=git_current_branch
alias gcb=git_current_branch
alias cgb=git_current_branch

# TODO: extract git_add and git_commit into seperate functions
function git_add_commit {
  if [ $# -lt 2 ]; then return "Enter a commit message"; fi
  if [ $# -eq 2 ]; then
    if [ $1 = "." ]; then 1="-A"; fi
  fi

  g_add=()
  while [ $# -gt 1 ]; do
    g_add+="$1"
    shift
  done

  g_msg=$1

  echo "Adding: $g_add"
  git add $g_add
  echo "With message: $g_msg"
  git commit -m $g_msg
}
alias gac='git_add_commit'

function git_add_commit_push {
  git_add_commit $@
  g_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  git push -u origin $g_branch
}
alias gacp='git_add_commit_push'

function git_add_commit_push_no_verify {
  git_add_commit $@
  g_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  git push --no-verify --set-upstream origin $g_branch
}
alias gacpnv=git_add_commit_push_no_verify

function git_add_commit_push_set_upstream_no_verify {
  git_add_commit $1 "$2"
  shift
  shift
  git_push_set_upstream $@ --no-verify
}
alias gacpsunv=git_add_commit_push_set_upstream_no_verify

function git_branch_delete {
  case $1 in
  '-l')
    shift
    git_branch_delete_local "$@"
    ;;
  '-r')
    shift
    git_branch_delete_remote "$@"
    ;;
  '-lr'|'-rl')
    shift
    if test $# -eq 0; then
      git_branch_delete_usage
      return 2
    fi
    git_branch_delete_local_and_remote "$@"
    ;;
  *)
    git_branch_delete_usage
    return 1
    ;;
  esac
}
alias gbd='git_branch_delete'

function git_branch_delete_usage {
  echo "Usage: git_branch_delete: At least one flag is required:
    -l branch_name[s, ...]               # deletes local branch only
    -r [remote/]branch_name[s, ...]      # delete remote branch only
    -lr|-rl [remote/]branch_name[s, ...] # deletes local and remote branches
If no remote provided for -r|-lr|-rl, origin is assumed
"
}

function git_branch_delete_local {
  branches=( $@ )
  local_branches=()
  for branch in $branches
  do
    git_branch_history rm $branch
    remote_and_or_branch=( $(echo $branch | tr "/" " ") )
    length=${#remote_and_or_branch}
    local_branches+=("${remote_and_or_branch[$length]}")
  done

  echo "${YLW}Deleting local branch(es): $local_branches${NONE}"
  git_resp=$(git branch -D $local_branches)
  handle_git_resp "$git_resp"
}

function git_branch_delete_remote {
  for remote_branch in $@
  do
    remote_and_or_branch=( $(echo "$remote_branch" | tr "/" " ") )

    if [ ${#remote_and_or_branch[@]} -eq 2 ]; then
      remote=${remote_and_or_branch[1]}
      branch=${remote_and_or_branch[2]}
    else
      echo 'Defaulting to remote => origin'
      remote='origin'
      branch="$remote_and_or_branch"
    fi

    git push --no-verify $remote --delete $branch
    git remote prune origin
  done
}

function git_branch_delete_local_and_remote {
  if test $# -eq 0; then
    return "Usage: $0 [remote/]branch_name[s, ...]"
  fi

  git_branch_delete_local $@
  git_branch_delete_remote $@
  git remote prune origin
}

function git_branch_set_upstream {
  if [ $2 ]; then
    branch=$2
    remote=$1
  elif [[ $1 == *\/* ]]; then
    IFS='/' read -r remote origin <<< "$1"
  elif [ $1 ]; then
    remote=origin
    branch=$1
  else
    remote=origin
    branch=`gcb`
  fi

  echo "Setting upstream branch to $CYN$remote/$branch$NONE"
  git branch --set-upstream-to="$remote/$branch"
}

function git_checkout {
  local remote=""
  local branch=""
  local matched_branch=""
  local gco_args=""
  git_branch_history add # ensure current branch is in GBH before changing

  if [ "$1" = "-b" ]; then
    branch=$2
  elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    git checkout --help
    return
  elif [ "$1" = "-t" ] || [ "$1" = "--track" ]; then
    remote="${2%/*}/"
    branch="${2#*/}"
  else
    matched_branch=$(git_branch_history ls $1)
    if [ "$matched_branch" != "" ]; then
      branch=$matched_branch
      set -- "$branch" "${@:2}"
    else
      branch=$1
    fi
  fi

  echo "Checking out: $remote$branch"

  current=`git_branch_history current`
  if [ "$current" = "$branch" ]; then
    echo "$branch is already checked out"
    return 0
  fi

  msg=`git checkout $@ 2>&1`
  co_status=$?
  if [ $co_status -gt 0 ]; then
    setopt NULL_GLOB
    if [[ $msg = "error: pathspec"*"did not match any file(s) known to git" ]]; then
      git_branch_history rm $branch &> /dev/null
      echo "Branch '$remote$branch' not found."
    else
      echo $msg
    fi
    unsetopt NULL_GLOB
    return $co_status
  fi

  git_branch_history add

  if [ $1 != '--' ]; then
    echo "$(git_branch_history last) => $(git_branch_history current)"
  fi
}

function git_checkout_last {
  branch=`git_branch_history last`
  git_checkout $branch
}

function git_commit_push {
  git commit -m $1 && git push
}

function git_checkout_safe_force {
  local branch=$1
  g_status=${$(git status)[-1]}

  if [ "$g_status" != "clean" ]; then
    local stash=1
    git stash
  fi

  git checkout $branch
  if [ $? -eq 1 ]; then
    git checkout -b $branch
  fi

  if [ $stash ]; then
    echo "$YLW\nWARNING:$NONE the following unstaged changes were stashed!"
    echo "`git stash show`"
  else
    echo $GRN"Success!"$NONE
  fi
}
alias gcosf='git_checkout_safe_force'

function git_ignore_and_remove {
  for file in $@;
  do
    printf "\n$file" >> ./.gitignore;

    if [[ -f $file ]]; then
      git rm --cached $file;
    elif [[ -d $file ]]; then
      git rm -r --cached $file;
    fi
  done
  printf "\n" >> ./.gitignore;
}
alias gigrm='git_ignore_and_remove'

function git_lastnhashes {
  git rev-list --max-count=$1 HEAD
}
alias gln='git_lastnhashes'

function git_merge_push {
  if [ $2 ]; then
    echo "Only one argument allowed (name of branch to merge); commit message is supplied automatically"
    return
  fi

  if [ ! $1 ]; then
    echo "Must supply name of branch to be merged into the current branch"
    return
  fi

  git merge $1
  curr_status=`git status`

  if [[ $curr_status == *"CONFLICT"* ]]; then
    echo "There are conflicts that need resolved."
    return
  elif [[ $curr_status != *"nothing to commit"* ]]; then
    git add -A
    git commit -m "Backmerge $1 into $(gbh current)"
  else
    echo "$curr_status"
  fi
  git push -u origin
}
alias gmpu=git_merge_push

function git_new_branch {
  if [ ! $1 ]
  then
    echo "Usage $0: Must provide a name for the new branch (and optional source branch)"
    return
  fi
  current_branch=`cgb`
  if [ $2 ]; then source=$2; else source=$current_branch; fi
  git_checkout_safe_force $source
  git checkout -b $1
  git commit --allow-empty -m 'Branch initialization'
  git push -u origin $1 --no-verify
}
alias gnb=git_new_branch

function git_stash_apply_saved_stash {
  if [ ! $1 ]; then
    echo "Usage $0: Must enter a stash name"
  else
    git stash apply stash^{/"$1"}
  fi
}
alias gstass=git_stash_apply_saved_stash

function handle_git_resp {
  if [[ $line == "err*" ]]; then
    echo "${RED}$1${NONE}"
  else
    echo "${GRN}$1${NONE}"
  fi
}

function git_include_from_external_dir {
  remote_path=$1
  local_path=${2:-.}
  cp -r $remote_path $local_path && git status
}
alias gifed=git_include_from_external_dir

echo 'Sourced .git_functions'
